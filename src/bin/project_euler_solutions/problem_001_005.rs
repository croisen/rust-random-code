use super::extra_funcs;

pub fn problem_1(verbose: bool) -> String {
    println!("If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6, and 9. The sum of these multiples is 23.");
    println!("Now find the sum of all the multiples of 3 or 5 below 1000");

    let mut result: i64 = 0;
    if verbose {
        (1i64..1000i64)
            .filter( |&x| ((x % 3 == 0) || (x % 5 == 0)) )
            .for_each( |x| {
                    println!("Current number: {:>3}, Current sum: {:>7}", x, result);
                    result += x;
            });
    } else {
        result = (1i64..1000i64)
            .filter( |&x| ((x % 3 == 0) || (x % 5 == 0)) )
            .sum();
    }
    println!("The sum of all numbers below 1000 that are divisible by 3 or 5 is {}", result);
    return result.to_string();
}

pub fn problem_2(verbose: bool) -> String {
    println!("Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89,...");
    println!("By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.");

    let mut a: i64      = 1;
    let mut b: i64      = 2;
    let mut result: i64 = 0;
    let mut c: i64;
    while a < 4000000 {
        if verbose { println!("Current fibonacci number: {:>7}", a); }
        c = a + b;
        a = b;
        b = c;

        if ( a % 2 == 0 ) && (a < 4000000) { result += a; }
    }
    println!("The sum of all even fibonacci numbers below 4 million is: {}", result);
    return result.to_string();
}

pub fn problem_3(verbose: bool) -> String {
    println!("The prime factors of 13,195 are 5, 7, 13, and 29");
    println!("What is the largest prime factor of 600,851,475,143?");

    let big_num: i64 = 600_851_475_143;
    let mut result: i64  = 0;
    (3..(f64::sqrt(big_num as f64)) as i64)
        .step_by(2)
        .filter(|x| big_num % x == 0)
        .for_each( |x| {
            if extra_funcs::art_thou_prime(x).unwrap() {
                result = x;
                if verbose {
                    println!("Current highest prime factor of {:>12} is {:>4}", big_num, result);
                }
            }
        });
    println!("The higest prime factor of {} is {}", big_num, result);
    return result.to_string();
}

pub fn problem_4(verbose: bool) -> String {
    println!("A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 x 99.");
    println!("Find the largest palindrome made from the product of two 3-digit numbers.");

    let mut res: i64 = 0;
    (100i64..1000i64)
        .for_each(|x| {
            (100i64..1000i64)
                .filter(|y| extra_funcs::reverse_an_integer(x * y) == x * y)
                .for_each(|z| {
                    if (x * z) > res {
                        res = x * z;
                        if verbose {
                            println!("Current palindrom product: {:>6} Digits: {:>3} {:>3}",
                                x * z, x, z);
                        }
                    }
                })
        });

    println!("The highest palindrom product made by two 3 digit numbers is {}", res);
    return res.to_string();
}

pub fn problem_5(verbose: bool) -> String {
    println!("2520 is the smallest number that can be divided by each of the numbers from to without any remainder.");
    println!("What is the smallest positive number that is evenly divisible (divisible with no remainder) by all of the numbers from 1 to 20?");

    if verbose {
        println!("Currently using rust iterator filters to get the lowest number evenly divisible by 1 through 20");
    }
    let divisors: i64 = 20;
    let res: String = (divisors..)
        .step_by(divisors as usize)
        .filter(|&x| extra_funcs::is_divisible_by_1_through_n(x, divisors))
        .nth(0)
        .unwrap()
        .to_string();
    println!("The lowest number that is evenly divisible by 1 through 20 is {}", res);
    return res;
}
